buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "Sonatype"
            url = 'https://oss.sonatype.org/content/groups/public'
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
        classpath 'com.matthewprenger:CurseGradle:1.0-SNAPSHOT'
    }
}

apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: 'com.matthewprenger.cursegradle'

// Curseforge stuff, Upcraft please explain
apply from: 'https://gist.githubusercontent.com/UpcraftLP/0a98a7dfe913bd3e99073efa7ad0353b/raw/mod_script.gradle'
ext.changeLog = getChangelogTextEdited() // see at the bottom for definition
// Update JSON generation
apply from: 'https://raw.githubusercontent.com/Ladysnake/LadyLib/master/update_json.gradle'
build.finalizedBy updateJson

import java.time.Year


def username = "${modid}"
if (project.hasProperty('dev_mail')) {
    username = "${dev_mail}"
} else if (project.hasProperty('dev_username')) {
    username = "${dev_username}"
}

def buildVersion = project.mod_version + ext.buildName
version = "${project.mc_version}-${buildVersion}"
group = project.mod_group // http://maven.apache.org/guides/mini/guide-naming-conventions.html
//noinspection GroovyUnusedAssignment
archivesBaseName = project.modid
tasks.build.doFirst { println("Current version is ${modid}-${version}") }

sourceCompatibility = targetCompatibility = project.jvm_version // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = project.jvm_version
}

repositories {

    maven {
        //JEI files
        name = "DVS1 Maven FS"
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "http://modmaven.k-4u.nl"
    }

    //local maven, if present
    mavenLocal()

    maven {
        //fallback for almost everything, this is CurseForge :P
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven"
    }

    maven {
        //hwyla
        name = "TehNut"
        url = "https://tehnut.info/maven"
    }

    maven {
        //get dependencies from github
        name = "JitPack"
        url = "https://jitpack.io"
    }

}

configurations {
    contained {
        transitive = false
    }
    //compile.extendsFrom contained
}

dependencies {

    deobfCompile "com.github.Ladysnake:Ladylib:${ll_version}"
    contained "com.github.Ladysnake:Ladylib:${ll_version}"
    compile "com.github.GlassPane:GlassPane:${gp_version}"
    contained "com.github.GlassPane:GlassPane:${gp_version}"

    //mod compat
    deobfProvided "mezz.jei:jei_${mc_version}:${jei_version}"

    deobfCompile "com.github.Lykrast:HarvestersNight:1.0.1"
    deobfCompile "com.github.bl4ckscor3:Scarecrows:v1.0.1"
    deobfCompile "com.github.gigaherz:EyesInTheDarkness:v0.0.1"
//    compile "com.github.Ladysnake:Dissolution:${dis_version}:api"
//    contained "com.github.Ladysnake:Dissolution:${dis_version}:api"
//    runtimeOnly "com.github.Ladysnake:Dissolution:${dis_version}"
}

updateJson {
    curseforgeURL = files_url
}

minecraft {
    version = "${project.mc_version}-${project.forge_version}"
    if (project.hasProperty('runDir')) {
        runDir = project.runDir
    } else if (file('../run').exists()) {
        runDir = "../run"
    } else {
        runDir = "run"
    }

    mappings = project.forge_mappings
    if ("${mappings}" != "${project.ext.mappings}" && "${mappings}".startsWith("snapshot_")) {
        printf("You are on old mappings, latest mappings are %s (you are on %s)", [project.ext.mappings, mappings])
    }
    makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    replace "@VERSION@", project.mod_version
    def fingerPrintKey = project.hasProperty('public_key') ? findProperty('public_key').replace(":", "").toLowerCase(Locale.ROOT) : "undefined"
    replace "@FINGERPRINTKEY@", fingerPrintKey
    replace "@UPDATE_JSON@", project.update_json
    replace "required-after:forge", "required-after:forge@[" + project.forge_version + ",)"
    replace "after:jei", "after:jei@[4.12,)" //TODO set jei major version number in properties file? ^Up
    replace "required-after:glasspane", "required-after:glasspane@[${project.gp_version},)"
    replace "required-after:ladylib", "required-after:ladylib@[${project.ll_version},)"
    replaceIn "${project.reference_class}"

    //auto-configure the run arguments
    if (project.hasProperty('dev_uuid')) {
        clientRunArgs += "--uuid=${dev_uuid}"
    } else {
        clientRunArgs += "--username=${username}"
        if (project.hasProperty('dev_password')) clientRunArgs += "--password=${dev_password}"
    }

    //skip the screen to confirm that you want to load a world with missing registry entries
    serverJvmArgs += "-Dfml.doNotBackup=true"
    clientJvmArgs += "-Dfml.doNotBackup=true"

    // skip having to confirm on server
    serverJvmArgs += "-Dfml.queryResult=confirm"

    // disable server gui
    serverRunArgs += "nogui"

    //skip jansi warnings in the log
    serverJvmArgs += '-Dlog4j.skipJansi=true'
    clientJvmArgs += '-Dlog4j.skipJansi=true'
}

// API jar
task apiJar(type: Jar) {
    onlyIf {
        project.hasProperty("api_package")
    }
    from (sourceSets.main.allJava) {
        include "${findProperty("api_package")}/**"
    }
    from "LICENSE"
    manifest.mainAttributes(
            "Built-On-Java": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
            "Implementation-Title": "${project.name}-api",
            "Implementation-Version": project.version,
            "Maven-Artifact": "${project.group}:${project.archivesBaseName}:${project.version}:api",
            "Built-On": "${mc_version}-${forge_version}"
    )
    classifier = 'api'
}

// Javadoc jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    from "LICENSE"
    manifest.mainAttributes(
            "Built-On-Java": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
            "Implementation-Title": project.name + '-javadoc',
            "Implementation-Version": project.version,
            "Maven-Artifact": "${project.group}:${project.archivesBaseName}:${project.version}:javadoc",
            "Built-On": "${mc_version}-${forge_version}"
    )
    classifier = 'javadoc'
}

jar {
    from "LICENSE"
    from(configurations.contained.files) {
        include '*'
        into 'META-INF/libraries'
    }
    manifest.mainAttributes(
            "Implementation-Title": project.name,
            "Implementation-Version": "${project.mod_version}",
            "Built-On": "${project.mc_version}-${project.forge_version}",
            'Maven-Artifact': "${project.group}:${project.archivesBaseName}:${project.version}",
            'Timestamp'     : System.currentTimeMillis(),
            'ContainedDeps': configurations.contained.files.collect { it.name }.join(" "),
            "FMLAT": "${project.modid}_at.cfg"
    )
}

task signApiJar(type: SignJar, dependsOn: apiJar) {
    onlyIf {
        project.hasProperty('sign_keyStore')
    }
    keyPass = findProperty('sign_keyPass')
    keyStore = findProperty('sign_keyStore')
    storePass = findProperty('sign_storePass')
    alias = findProperty('sign_alias')

    inputFile = apiJar.archivePath
    outputFile = apiJar.archivePath
}

task signJavadocJar(type: SignJar, dependsOn: javadocJar) {
    onlyIf {
        project.hasProperty('sign_keyStore')
    }
    keyPass = findProperty('sign_keyPass')
    keyStore = findProperty('sign_keyStore')
    storePass = findProperty('sign_storePass')
    alias = findProperty('sign_alias')

    inputFile = javadocJar.archivePath
    outputFile = javadocJar.archivePath
}

task signJar(type: SignJar, dependsOn: reobfJar) {
    onlyIf {
        project.hasProperty('sign_keyStore')
    }
    keyPass = findProperty('sign_keyPass')
    keyStore = findProperty('sign_keyStore')
    storePass = findProperty('sign_storePass')
    alias = findProperty('sign_alias')

    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}
if (project.hasProperty("api_package")) tasks.build.dependsOn signApiJar
tasks.build.dependsOn signJar, signJavadocJar
tasks.curseforge.dependsOn build

// Artifacts to upload to local maven repository
artifacts {
    //archives apiJar
    archives javadocJar
}

def curseRelations = {
    //requiredLibrary '' //add curseforge-slug here
}

// Upload file to curseforge
curseforge {
    if (project.hasProperty('curse_key'))
        apiKey = project.curse_key

    if (project.hasProperty('curse_id')) {
        project {
            id = project.curse_id
            changelogType = 'markdown'
            changelog = "${project.ext.changeLog}"
            releaseType = project.release_type

            relations curseRelations

            addArtifact javadocJar
            //addArtifact sourceJar
            //addArtifact apiJar

            //addGameVersion '1.12'
            //addGameVersion '1.12.1'
            //addGameVersion '1.12.2'

            mainArtifact(jar) {
                displayName = "${project.mod_name} v${project.mod_version} MC${project.mc_version}"
            }
        }
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'modid': project.modid, 'name': project.mod_name, 'description': project.mod_description, 'version': project.mod_version, 'mcversion': project.minecraft.version, 'url': project.url, 'updateUrl': project.update_json, 'year': String.valueOf(Year.now().getValue())
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    //ATs
    rename '(.+_at.cfg)', 'META-INF/$1'
}

/**
 * A variant of the original method to account for the version separators being different
 * @return a string containing the changelog for this version
 */
String getChangelogTextEdited() {
    def changelogFile = new File(project.projectDir, "changelog.md")
    String str = ''
    if(!changelogFile.exists()) {
        System.out.println("No changelog file found, creating one at \"" + changelogFile.getAbsolutePath() + "\"")
        changelogFile.createNewFile()
        makeNewChangelog(changelogFile)
        return str
    }
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        // Retrieve the version from the first line
        if (lineCount == 0) {
            lineCount++
            return it.substring(6, it.length() - (it.endsWith(" - BUILT") ? 8 : 0))
        }
        // Read unless we find another version line
        if (!it.startsWith("##### Version ")) {
            str += "$it\n"
            return
        }
        done = true // once we go past the first version block, parse no more
    }
    str += "\n\n see full changelog [here](${project.changelog_url} \"Changelog\")"
    return str
}
